git commands
 
git clone [https://...] [name]
git clone [/home/path/to/folder/] [name]

git init

git add -A  ---> add all file to version control 
git add [directory]/\*  -> add certain folder only
git remote add origin [repository address]
git remote add origin https://github.com/....
git remote add origin user@192.168.0.1:~/git/folder
git remote add origin d:\git\folder
git remote
git remote -v  ----> show detail
git remote remove [name]
git remote set-url origin https://....

git clone https://github.com/nomadlife/php.git php
git clone sv3:/hdd2/git_base/torchscript-api

git config user.name
git config user.email
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
git config --global core.autocrlf false

git config --global credential.helper cache  :  caching credential for 15min(default)
git config --global credential.helper 'cache --timeout=3600'  : caching for 1hour


=================== commit / push / stash =============================
git commit -m “commit message”
git commit -a  --> add 과정 없이 바로 커밋할때
git commit --amend  --> Edit last commit message(only for Local repo)

git show : show detail on HEAD
git show [commit] : show detail on commit

git config --global core.editor "vi" --> Basic Editor change

git push -u origin master
git push --all origin

git pull
git pull origin master


** overwrite local with remote repository
git fetch --all
git reset --hard origin/maser 


git stash
git stash --include-untracked
git stash save "my_stash"
git stash --include-untracked
git stash list
git stash apply
git stash drop
git stash pop

** save id/pw :
$ git config credential.helper store  --> in the each git directory

$ git push http://example.com/repo.git
Username: <type your username>
Password: <type your password>
Also I suggest you to read
$ git help credentials


git diff
git diff [version1] [version2]
git diff [branch] : compare with current branch
git diff --name-status [branch] : compare with current branch

git reset (—mixed): keep only changed files. ‘mixed’ is default option.
git reset --hard [version hash ID] : restore all changes after last commit.(back to last commit)
git reset --soft : back to before commit. only tracked status.
git revert [version hash ID]

**delete all untracked files
git clean -f -d    : delete all untracked files
git clean -d -n    : check target item
git clean -f -d -x : include .gitignore target


======================== Branch ==============================

git branch            : show all local branch
git branch -r         : show remote branch list (maybe not latest)
git ls-remote         : show remote branch list (latest)
git remote show [origin] : show detail info for remote repo(branches), latest.
git branch -vv   : how tracking branch

git branch [branch]   : make new branch from current commit
git checkout [branch]       : change branch
git checkout <commit>       : change head to commit
git checkout -b [branch]    : new & change branch
git branch -m new-name          : rename
git branch -m old-name new-name : rename
git branch -d [branch]     : delete branch
git merge [branch]         : merge branch, take the branch into current branch.
git merge <commit#>        : merge commit,

git branch [branch] --set-upstream-to [remote]/[branch] : Change Remote Branch
git branch -d -r [remote]/[branch]  : Delete TRACKING remote branch(disconnect)

git branch branchname <sha1-of-commit>
git branch branchname HEAD~3

git checkout <sha-1 of that commit>


** Branch (Remote):
git remote update : update(download) (all)remote (all)branch info(object)

** Clone Remote branch :
git checkout [branch]
git checkout -t [remote/branch]
git checkout -b [new_branch_name] [remote/branch]

or manualy
git branch [new_local_branch]
git checkout [new_local_branch]
git pull origin [remote_branch]


** checkout single file(or all) from other branch
git checkout -p [branch] : take all tracked, but step by step
git checkout -p [branch] file : tracked file
git checkout [branch] file : new file

git cherry-pick <commit-hash>

** checkout all changes from another branch
git checkout branchA -- .


==================== log ================
git log -1                   : list 1 commit 
git log -p                   : difference between versions 
git log -p master..exp       : code compare
git log <remote>/<branch>    : repo log
git log --branches (or --all): see all brances
git log --all 
git log --all --graph 
git log --all --graph --oneline --decorate
git config --global alias.lg "log --graph --decorate --oneline"
git config --get-regexp ^alias\.

***alias(conventional)***
co = checkout
br = branch
ci = commit
st = status
cp = cherry-pick
cl = clone
***

git show REVISION:path/to/file

git diff master..exp  → 모든파일내용 비교

git rm --cached mylogfile.log 
git rm --cached -r mydirectory

==== submodulw ====
:add repo
git submodule add <url> nodejs-cookie
git submodule add ./nodejs-cookie

:remove repo
git rm --cached nodejs-cookie

:clone all
git clone --recurse-submodules ~/Documents/Repositories/test test

:deinit
git submodule deinit --all

