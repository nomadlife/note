GIT 명령어
 
vim [filename]  ---->텍스트 파일만들기 혹은 파일 수정
cat [filename]  --->파일내용 보기
git init
git add -A  ---> 신규 혹은 수정된 파일 한꺼번에 버전관리 추가하기.
git add [directory]/\*  -> add certain folder only
git remote add origin [repository address]
git remote
git remote -v  ----> 주소 상세히 보기
git remote remove [name]

git clone https://github.com/nomadlife/php.git php
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
**-global 옵션으로 설정한 것은 딱 한 번만 하면 된다. 
해당 시스템에서 해당 사용자가 사용할 때에는 이 정보를 사용한다. 
만약 프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 --global 옵션을 빼고 명령을 실행한다.
git config --global core.autocrlf false


git commit -m “commit message”
git commit -a  --> add 과정 없이 바로 커밋할때
git commit --amend  ------>마지막 커밋 메세지 수정(vim에서)
  ㄴ> 지역저장소에서만 가능, 원격저장소에는 저장후 수정안됨.

git config --global core.editor "vi" --> Basic Editor change


git push -u origin master
git push --all origin

git pull
git pull origin master

git stash : save current working directory, reset HEAD. (for avoid conflict when pull)
git stash list
git stash apply

**push 할때마다 id/pw 요구하면,,
$ git config credential.helper store  --> git directory 내에서 설정.
$ git push http://example.com/repo.git
Username: <type your username>
Password: <type your password>
Also I suggest you to read
$ git help credentials


git diff
git diff [version1] [version2]
git reset (—mixed): keep only changed files. ‘mixed’ is default option.
git reset --hard [version hash ID] : restore all changes after last commit.(back to last commit)
git reset --soft : back to before commit. only tracked status.
git revert [version hash ID]

 
git branch   --> branch 보기
git branch [branch name]   ---> branch 만들기
git checkout [branch name]  --->branch로 이동
git branch -d [branch name]  ---->branch 삭제
git merge [branch name] ---->branch 병합, main이 될 branch로 가서 실행할것.

git branch branchname <sha1-of-commit>
git branch branchname HEAD~3
rename:
git branch -m new-name
git branch -m old-name new-name

git checkout <sha-1 of that commit>

git log -p       -----> difference between versions 
git log -p master..exp  -> 버전간 소스코드 비교
git log <remote>/<branch> :repo 로그보기 
git log --branches 
git log --branches --decorate 
git log --branches --decorate --graph 
git log --branches --decorate --graph --oneline
git log --graph
git log --graph --oneline

git show REVISION:path/to/file

git diff master..exp  → 모든파일내용 비교

git rm --cached mylogfile.log 
git rm --cached -r mydirectory
