git commands
 
vim [filename]  ----> edit or make text file
cat [filename]  ---> show file content

git init
git add -A  ---> add all file to version control 
git add [directory]/\*  -> add certain folder only
git remote add origin [repository address]
git remote
git remote -v  ----> show detail
git remote remove [name]

git clone https://github.com/nomadlife/php.git php
git config user.name
git config user.email
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
**-global 옵션으로 설정한 것은 딱 한 번만 하면 된다. 
해당 시스템에서 해당 사용자가 사용할 때에는 이 정보를 사용한다. 
만약 프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 --global 옵션을 빼고 명령을 실행한다.
git config --global core.autocrlf false


git commit -m “commit message”
git commit -a  --> add 과정 없이 바로 커밋할때
git commit --amend  --> Edit last commit message(only for Local repo)

git config --global core.editor "vi" --> Basic Editor change


git push -u origin master
git push --all origin

git pull
git pull origin master


** overwrite local with remote repository
git fetch --all
git reset --hard origin/maser 


git stash : save current working directory, reset HEAD. (for avoid conflict when pull)
git stash list
git stash apply

**push 할때마다 id/pw 요구하면,,
$ git config credential.helper store  --> git directory 내에서 설정.
$ git push http://example.com/repo.git
Username: <type your username>
Password: <type your password>
Also I suggest you to read
$ git help credentials


git diff
git diff [version1] [version2]
git reset (—mixed): keep only changed files. ‘mixed’ is default option.
git reset --hard [version hash ID] : restore all changes after last commit.(back to last commit)
git reset --soft : back to before commit. only tracked status.
git revert [version hash ID]

**delete all untracked files
git clean -f -d    : delete all untracked files
git clean -d -n    : check target item
git clean -f -d -x : include .gitignore target



** Branch (Local)
git branch   --> show all local branch
git branch [branch name]   ---> new branch
git checkout [branch name]  ---> change working branch
git branch -d [branch name]  ----> delete branch
git merge [branch name] ---->merge branch, take the branch into current branch.

git branch branchname <sha1-of-commit>
git branch branchname HEAD~3

git checkout <sha-1 of that commit>

** Rename branch:
git branch -m new-name
git branch -m old-name new-name



** Branch (Remote):
git branch -r : show remote branch list (saved in local). maybe not latest.
git ls-remote : show remote branch list, latest.
git remote show [origin] : show detail info for remote repo(branches), latest.

git remote update : update remote branch info

** Clone Remote branch :
git checkout -b [branch_name] [origin/branch_name]
git checkout -t [origin/branch_name]

or manualy
git branch [new_local_branch]
git checkout [new_local_branch]
git pull origin [remote_branch]

** Change Remote Branch(with new repository)
git branch branch_name --set-upstream-to new_remote/branch_name

 

git log -p       -----> difference between versions 
git log -p master..exp  -> 버전간 소스코드 비교
git log <remote>/<branch> :repo 로그보기 
git log --branches 
git log --branches --decorate 
git log --branches --decorate --graph 
git log --branches --decorate --graph --oneline
git log --graph
git log --graph --oneline

git show REVISION:path/to/file

git diff master..exp  → 모든파일내용 비교

git rm --cached mylogfile.log 
git rm --cached -r mydirectory
