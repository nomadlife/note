** extract video frame 
- all
./ffmpeg.exe -i d:/cjenm/sample/mcountdown_01.mpg -deinterlace d:/cjenm/sample/images2/%05d.png

- 1 frame per second
./ffmpeg.exe -i d:/cjenm/sample/mcountdown_01.mpg -r 1/1 -deinterlace d:/cjenm/sample/images/%05d.png


**ffplay 
ffplay filename.mp3 -nodisp -hide_banner -autoexit -volume 10 -loop 0
ffplay filename.mp3 -nodisp -hide_banner -loop 0 -volume 10

=================================
** audio merge
ffmpeg -i first.mka -i second.mka -i third.mka -i fourth.mka
       -filter_complex
         "[1]adelay=184000|184000[b];
          [2]adelay=360000|360000[c];
          [3]adelay=962000|962000[d];
          [0][b][c][d]amix=4"
merged.mka

** Video merge 
ffmpeg -i video1.avi -i video2.avi -filter_complex “[0:v:0] [0:a:0] [1:v:0] [1:a:0] concat=n=2:v=1:a=1 [v] [a]” -map “[v]” -map “[a]” output_video.avi



** quiet option
-v quiet -stats


** asf -> asf
ffmpeg -i input.asf -s 168x128 test_168x128.asf -v quiet -stats // 6.4M -> 39M

** asf -> mp4 
ffmpeg -i input.asf -c:v libx264 -c:a aac -strict -2 test.mp4 //  audio:aac 9.8M -> 23.6M

ffmpeg -i input.asf -s 168x128 -c:v libx264 -c:a aac -strict -2 test_168x128_aac.mp4 // 9.8M ->  17.7M
ffmpeg -i input.asf -s 168x128 -c:v libx264 -c:a libmp3lame -ac 2 -b:a 190k test_168x128_mp3.mp4 // audio: mp3, 9.8M -> 24.9M

-- without vcodec
ffmpeg -i input.asf -s 168x128 -c:a mp3 test2_168x128_mp3_2.mp4 // 6.4M
ffmpeg -i input.asf -s 168x128 -acodec mp3 test2_168x128_mp3.mp4 // 6.4M
ffmpeg -i input.asf -s 168x128 -acodec aac -strict -2 test2_168x128_aac.mp4 // 17.7M

-- asf -> avi
ffmpeg -i input.asf -s 168x128 test_resize_168x128.avi // 9.8M -> 12M

-- batch
-mp4
for i in *.asf; do ffmpeg -i $i -s 168x128 -acodec mp3 "_${i%.asf}.mp4"; done   // -> file name error. need ""
for i in *.asf; do ffmpeg -i "${i}" -s 168x128 -acodec mp3 "_${i%.asf}.mp4"; done
-time check
time for i in *.asf; do echo "${i}";time ffmpeg -i "${i}" -s 168x128 -acodec mp3 "timetest_${i%.asf}.mp4" -v quiet -stats; done // 8m23s, 68.3M -> 82.1M
-avi
for i in *.asf; do echo "${i}";ffmpeg -i "${i}" -s 168x128 "__${i%.asf}.avi" -v quiet -stats; done
-time check
time for f in *.asf; do echo "${f}";time ffmpeg -i "${f}" -s 168x128 "_${f%.asf}.avi" -v quiet -stats; done // 3m2s, 68.3M -> 105M ----->>>>>>>

- include folder
folder="/path/to/file";time for f in "${folder}"/*.asf; do echo "${f}";ffmpeg -i "${f}" -s 168x128 "${f%.asf}.avi" -v quiet -stats; done

** batch conversion 
for i in *.mp4; do ffmpeg -i $i -vn "${i%.mp4}.mp3"; done // ok
for i in *.mp4; do ffmpeg -i $i -vn "${i%.mp4}.mp3" -loglevel error ; done // ok

** merge subs with video // ??
ffmpeg -i 0.mp4 -vf "subtitles=2.srt:force_style='FontName=맑은 고딕,Fontsize=30'" -c:V libx264 -c:a aac 3.mp4

** merge two subtitle to video // not i want
ffmpeg -i Clean.mp4 -i spanish.ass -i english.ass -c:s mov_text -c:v copy -c:a copy -map 0:v -map 0:a -map 1 -map 2 -metadata:s:s:0 language=spa -metadata:s:s:1 language=eng With2CC.mp4
--> internet tool

** convert smi to srt
ffmpeg -i test.smi test.srt

** text encoding convert 
iconv -f ISO-8859-1 -t UTF-8 in.txt > out.txt
EUC-KR -> UTF-8
iconv -f EUC-KR -t UTF-8 in.txt > out.txt

** add subtitle
ffmpeg -i infile.mp4 -i infile.srt -c copy -c:s mov_text outfile.mp4

** make blank mp4 with audio (2) // hold
ffmpeg -t 1500 -s 1024x768 -f rawvideo -pix_fmt rgb24 -r 25 -i /dev/zero silence.mpeg // ??


** make blank mp4 with audio
-loop 1 : infinite loop 
ffmpeg -loop 1 -y -i image8.jpg -i sound11.amr -shortest -acodec copy -vcodec mjpeg result.avi
ffmpeg -loop 1 -y -i test.png -i test.mp3 -shortest -acodec copy -vcodec mjpeg result2.avi // ok, but size is big
ffmpeg -loop 1 -y -i test.png -i test.mp3 -shortest -acodec copy -vcodec mjpeg result2.mp4 // ok, but size is big

ffmpeg -loop 1 -i image.jpg -i audio.wav -c:v libx264 -tune stillimage -c:a aac -b:a 192k -pix_fmt yuv420p -shortest out.mp4
ffmpeg -loop 1 -i test.png -i test.mp3 -c:v libx264 -tune stillimage -c:a copy -b:a 192k -pix_fmt yuv420p -shortest result.mp4 -y -loglevel error // succeed !!
ffmpeg -loop 1 -i test.png -i test.mp3 -c:v libx264 -tune stillimage -c:a copy -b:a 192k -pix_fmt yuv420p result_1.mp4 -y -loglevel error // fail ??? 
ffmpeg -loop 1 -i test.png -i test.mp3 -c:v libx264 -tune stillimage -c:a copy -pix_fmt yuv420p -shortest result_2.mp4 -y -loglevel error // succeed !!
ffmpeg -loop 1 -i test.png -i test.mp3 -c:v libx264 -tune stillimage -c:a copy -shortest result_3.mp4 -y -loglevel error // succeed !!
ffmpeg -loop 1 -i test.png -i test.mp3 -c:v libx264 -c:a copy -shortest result_4.mp4 -y -loglevel error // succeed !!  
ffmpeg -loop 1 -i image.png -i audio.mp3 -c:v libx264 -c:a copy -shortest video.mp4 // too slow

ffmpeg -i test.png -i test.mp3 -c:v libx264 -c:a copy result_5.mp4 -y -loglevel error   // fail - no video
ffmpeg -i test.png -i test.mp3 -c:v libx264 -tune stillimage -c:a copy result_5.mp4 -y -loglevel error
ffmpeg -framerate 1 -loop 1 -i blank.png -i audio.mp3 -c:v libx264 -c:a copy -shortest video2.mp4 // fast. but subtitle sync not match. 

ffmpeg -y -i test.png -i test.mp3 -c:a copy result.avi // ok
ffmpeg -y -i test.png -i test.mp3 -c:a copy result.mp4 // fail : no video
ffmpeg -y -i test.png -i test.mp3 -c:a copy -c:v mpeg4 result.mp4 -loglevel error // no video
ffmpeg -y -i test.png -i test.mp3 -c:a copy -vcodec mpeg4 result.mp4 -loglevel error // no video
ffmpeg -y -i test.png -i test.mp3 -c:a copy -vcodec libx264 result.mp4 -loglevel error // no video

-crf 23 -preset ultraslow
ffmpeg -y -i test.png -i test.mp3 -c:a copy -vcodec libx264 -crf 23 -preset ultraslow result.mp4 -loglevel error // no video

ffmpeg -framerate 24 -i Project%03d.png Project.mp4
ffmpeg -framerate 24 -i test.png -i test.mp3 -c:a copy Project.mp4 -loglevel error // fail : no video

ffmpeg -y -i video.mp4 -vn -c:a copy -q:a 0 -map a output.mp3 -loglevel error // fail




**extract audio

ffmpeg -i sample.avi -q:a 0 -map a sample.mp3

ffmpeg -i sample.avi -ss 00:03:05 -t 00:00:45.0 -q:a 0 -map a sample.mp3


** without message
-loglevel error
-loglevel quiet
ffmpeg -hide_banner -loglevel panic

const struct { const char *name; int level; } log_levels[] = {
        { "quiet"  , AV_LOG_QUIET   },
        { "panic"  , AV_LOG_PANIC   },
        { "fatal"  , AV_LOG_FATAL   },
        { "error"  , AV_LOG_ERROR   },
        { "warning", AV_LOG_WARNING },
        { "info"   , AV_LOG_INFO    },
        { "verbose", AV_LOG_VERBOSE },
        { "debug"  , AV_LOG_DEBUG   },
    };


** mp4 extract

ffmpeg -i input.mp4 -vn output.mp4 

 -an : disable audio recording


** not change codec(bit rate)
ffmpeg -i input.mp4 -acodec copy -vn output.mp4

- acodec copy : audio를 디코딩/인코딩 하지 않고 그냥 copy 하라는 의미 

-c copy : 코덱을 그냥 카피하라는 의미, 오디오 비디오 모두에 해당한다. 

-acode copy : 오디오코덱을 카피하라는 의미 ( -vcode 은 비디오라는 뜻 ) 

-c:a copy : 코덱인데 오디오라는 의미 ( -c:v 이면 비디오라는 뜻 ) 



** mp3 extract

ffmpeg -i input.mp4 -vn output.mp3

 output 파일의 형식을 mp3로 하면 내부에서 자동으로 디코딩을 한후에 mp3 코덱으로 인코딩을 수행한다. 아래의 명령과 같은 의미가 된다. 

ffmpeg -i input.mp4 -acodec mp3 output.mp3



** cut mp4 

ffmpeg -i input_20s.mp4 -vn -ss 5 -to 10 -c copy ouput_5_10.mp4

 -ss 5 : 시작 위치를 지정한다. (즉, 5초부터 시작한다. )

 -to 10 : Stop writing the output at position ( 즉, 10초까지만 사용한다. )



** crop & fade-out

* 끝부분을 부드럽게 crop 하기 위해서 fade out 효과를 주면서. 

ffmpeg -i input_60s.mp4 -to 30 -filter_complex "afade=t=out:st=28:d=2" output_fadeout.mp3

-to 30 : 처음부터 30초까지 짜르라는 의미

-filter_complex : 복합필터를 적용하라는 뜻 

"afade=t=out" : fade효과인데 타입(t)은 서서히 줄어드는 효과(out) 

st=28 : (startTime) 28초부터 시작해서 

d=2 : (duration) 2초동안



** paste audio loop

ffmpeg -stream_loop 1 -i input.mp3 -c copy output_loop.mp3

-stream_loop n : n번 반복하라는뜻, 0은 반복 없음. -1은 무한 반복



** audio + audio 

ffmepg -i "concat:input_1.mp3|input_2.mp3" output.mp3

-i 다음에 입력파일이 오는 위치인데, 이부분에 따옴표가 붙으면서 subcommand가 왔다. 

concat:file1|file2|file3...    형식으로 붙이고 싶은 많큼 파일을 붙일 수 있다. 



** audio + video 

ffmpeg -i audio_only.mp3 -i video_only.mp4 -c copy ouput_mux.mp4




** video + video (by list.txt)

> cat files.txt

file 'a.mp4'

file 'b.mp4'

>ffmpeg -f concat -i files.txt -c copy c.mp4



** video + video 

ffmpeg -i "concat:input1.mpg|input2.mpg|input3.mpg" -c copy output.mpg

