vagrant command

vagrant init data-science-toolbox/data-science-at-the-command-line

turn on : vagrant up
connect : vagrant ssh
disconnect : exit
turn off : vagrant halt
delete : vagrant destroy

**shell command

head -n 3 data/movies.txt

echo 'Hello'\
> ' world' |
> wc

echo 'Hello world' | wc


fac() { (echo 1; seq $1) | paste -s -d\* | bc; }
fac 5
120

alias l='ls -1 --group-directories-first'
alias moer=more

type -a pwd
type -a cd
type -a fac
type -a l

seq 30 | grep 3
3
13
23
30

seq 100 | grep 3 | wc -l
19

seq 10 > data/ten-numbers

echo -n "Hello" > hello-world
echo " World" >> hello-world

cat hello-world | wc -w
< hello-world wc -w
wc -w hello-world

mv hello-world data
mv hello-world old-file
rm old-file
rm -r ~/book/ch02/data/old
cp server.log server.log.bak

man cat | head -n 20
help cd | head -n 20
jq --help

tar -xzvf data/logs.tar.gz

in2csv data/imdb-250.xlsx > data/imdb-250.csv
in2csv data/imdb-250.xlsx | head | cut -c1-80
in2csv data/imdb-250.xlsx | head | csvcut -c Title,Year,Rating | csvlook

sql2csv --db 'sqlite:///data/iris.db' --query 'SELECT * FROM iris WHERE sepal_length > 7.5'
sql2csv --db 'sqlite:///data/iris.db' --query 'SELECT * FROM iris WHERE sepal_length > 7.5' | csvlook

curl -s http://www.gutenberg.org/ebooks/epub/76/pg76.txt | head -n 10
 : -s for silent means diable downlaod status (currently the url not possible)
curl http://www.gutenberg.org/cache/epub/76/pg76.txt > data/finn.txt
curl -s http://www.gutenberg.org/cache/epub/76/pg76.txt -o data/finn.txt
curl -u username:password ftp://host/file

curl -L j.mp/locatbbar(-L or --location)
curl j.mp/locatbbar
curl -I j.mp/locatbbar

curl -s http://api.randomuser.me | jq '.'

chapter 4 make shell script

curl -s http://www.gutenberg.org/cache/epub/76/pg76.txt | tr '[:upper:]' '[:lower:]' | grep -oE '\w+' | sort | uniq -c | sort -nr | head -n 10

1. Copy and paste the one-liner into a file.
2. Add execute permissions.
3. Define a so-called shebang.
4. Remove the fixed input part.
5. Add a parameter.
6. Optionally extend your PATH.

step 1 : make file
bash ~/book/ch04/top-words-1.sh
echo "!!" > scriptname
!!

step 2 : permission
chmod u+x top-words-2.sh
ls -l top-words-{1,2}.sh
-rw-rw-r-- 1 vagrant vagrant 145 Jul 20 23:33 top-words-1.sh
-rwxrw-r-- 1 vagrant vagrant 143 Jul 20 23:34 top-words-2.sh

r:read w:wrote x:excutable
first 1 char : -:regular file d:directory
next 3 char : owner persmossions
next 3 char : group owner permissions
last 3 char : all other users permissions

./top-words-2.sh

step 3 : Define Shebang
#!/usr/bin/env bash

step 4 : Remove Fixed Input
#!/usr/bin/env bash
tr '[:upper:]' '[:lower:]' | grep -oE '\w+' | sort |
uniq -c | sort -nr | head -n 10

step 5 : Parameterize
#!/usr/bin/env bash
NUM_WORDS="$1"
tr '[:upper:]' '[:lower:]' | grep -oE '\w+' | sort |
uniq -c | sort -nr | head -n $NUM_WORDS

cat data/finn.txt | ./top-words-5.sh 5

step 6 : extend PATH vatiable
echo $PATH | fold
echo $PATH | tr : '\n' | sort
**edit the .bashrc or .profle file

** Pthon and R
#!/usr/bin/env python
from sys import stdin, stdout
while True:
line = stdin.readline()
if not line:
break
stdout.write("%d\n" % int(line)**2)
stdout.flush()

#!/usr/bin/env Rscript
f <- file("stdin")
open(f)
while(length(line <- readLines(f, n = 1)) > 0) {
write(as.integer(line)^2, stdout())
}
close(f)


Chapter 5 Scrubbing Data

echo 'foo\nbar\nfoo' | sort | uniq -c | sort -nr
2 foo
1 bar
--> ?? not possible. need to fix

echo 'foo\nbar\nfoo' | sort | uniq -c | sort -nr |
> awk '{print $2","$1}' | header -a value,count

value,count
foo,2
bar,1
--> ?? not possible. need to fix

cd ~/book/ch05/data
seq -f "Line %g" 10 | tee lines
Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10

< lines head -n 3
< lines sed -n '1,3p'
< lines awk 'NR<=3'
Line 1
Line 2
Line 3

< lines tail -n 3
Line 8
Line 9
Line 10

< lines tail -n +4
< lines sed '1,3d'
< lines sed -n '1,3!p'
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10

< lines head -n -3
Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7

< lines sed -n '4,6p'
< lines awk '(NR>=4)&&(NR<=6)'
< lines head -n 6 | tail -n 3
Line 4
Line 5
Line 6

< lines sed -n '1~2p'
< lines awk 'NR%2'
Line 1
Line 3
Line 5
Line 7
Line 9

< lines sed -n '0~2p'
< lines awk '(NR+1)%2'
Line 2
Line 4
Line 6
Line 8
Line 10

grep -i chapter alice.txt
** -i means case-insensitive

grep -E '^CHAPTER (.*)\. The' alice.txt
-E option in order to enable regular expressions

 seq 1000 | sample -r 1% | jq -c '{line: .}'
 seq 10000 | sample -r 1% -d 1000 -s 5 | jq -c '{line: .}'

 grep -i chapter alice.txt | cut -d' ' -f3-
 sed -rn 's/^CHAPTER ([IVXLCDM]{1,})\. (.*)$/\2/p' alice.txt > /dev/null


